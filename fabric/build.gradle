plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    modIncludeImplementation

    include.extendsFrom modIncludeImplementation
    modImplementation.extendsFrom modIncludeImplementation
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"

    // Fabric API modules used by HorseBuff
    modIncludeImplementation(fabricApi.module("fabric-api-base", project.fabric_api_version))
    modIncludeImplementation(fabricApi.module("fabric-rendering-data-attachment-v1", project.fabric_api_version))
    modIncludeImplementation(fabricApi.module("fabric-lifecycle-events-v1", project.fabric_api_version))
    modIncludeImplementation(fabricApi.module("fabric-registry-sync-v0", project.fabric_api_version))

    // Cloth Config
    modIncludeImplementation("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}"){
        exclude(group: "net.fabricmc.fabric-api")
    }
    // Fabric API modules used by Cloth Config
    modIncludeImplementation(fabricApi.module("fabric-screen-api-v1", project.fabric_api_version))
    modIncludeImplementation(fabricApi.module("fabric-resource-loader-v0", project.fabric_api_version))

    // Mod Menu
    modImplementation("com.terraformersmc:modmenu:${project.mod_menu_version}")

    // architectury stuff
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    dependsOn(copyCommonResources)
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
